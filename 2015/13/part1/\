use std::env;
use std::process;
use std::path::Path;
use std::fs::File;
use std::io::{self, BufRead};
use std::collections::HashMap;
use regex::Regex;

fn main() {
    // Read filename from args
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        println!("Usage: {} <inputfilename>", &args[0]);
        process::exit(1);
    }
    let filename = Path::new(&args[1]);
    // Open file and read lines into a buffered reader
    let file = match File::open(&filename) {
        Ok(fp) => fp,
        Err(_) => {
            println!("Unable to open file! {}", filename.to_str().unwrap());
            process::exit(2);
        },
    };
    let lines = io::BufReader::new(file).lines();

    // happiness_chart[<person1>][<person2>] = <change in happiness>
    let mut happiness_chart: HashMap<String, HashMap<String, i64>> = HashMap::new();
    // Line regex
    // <person1> would <+/-> <units> happiness units by sitting next to <person2>.
    let line_re = Regex::new(
        r"^(?<person1>\w+) would (?<sign>lose|gain) (?<amount>\d+) happiness units by sitting next to (?<person2>\w+)\.$"
    ).unwrap();

    for line in lines.map_while(Result::ok) {
        // skip empty lines
        if line.is_empty() {
            continue;
        }
        // Extract the regex captures from the line. If extraction fails, then
        // skip this line, but print an error.
        let Some(parts) = line_re.captures(&line) else {
            println!("Line did not match pattern!");
            continue;
        };
        
        // We should have exactly 5 captures (includes the full line at [0])
        if parts.len() != 5 {
            println!("Got the wrong number of captures!");
            continue;
        }
    
        let mut preferences: HashMap<String, i64> = match happiness_chart.get(&parts["person1"]) {
            Some(p) => p.clone(),
            None => {
                let new_people: HashMap<String, i64> = HashMap::new();
                happiness_chart.insert(String::from(&parts["person1"]), new_people);
                happiness_chart.get(&parts["person1"]).clone()
            }
        };
        let (person2, amount): (&String, &i64) = match preferences.get_key_value(&parts["person2"]) {
            Some((k, v)) => (k, v),
            None => {
                let mut amount: i64 = match parts["amount"].trim().parse() {
                    Ok(n) => n,
                    Err(_) => {
                        println!("Could not parse number! {}", &parts["amount"]);
                        process::exit(5);
                    }
                };
                if parts["sign"].to_owned() == "lose" {
                    amount = amount * -1;
                }
                preferences.insert(String::from(&parts["person2"]), amount);
                preferences.get_key_value(&parts["person2"]).as_mut().unwrap()
            }
        };
    }

    for (person1, preferences) in happiness_chart.iter() {
        println!("{}: {:#?}", person1, preferences);
    }
}
